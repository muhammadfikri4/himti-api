generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role?     @default(ADMIN)
  nim       String?
  anggotaId String?   @map("anggota_id")
  Absensi   Absensi[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  isLogin   Boolean   @default(false) @map("is_login")
  Point     Point[]
  UserFCM   UserFCM[]

  @@index([email, anggotaId])
}

model UserFCM {
  id       String @id @unique @default(uuid())
  userId   String @map("user_id")
  fcmToken String @map("fcm_token")
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_id")
  @@map("user_fcm")
}

model Dosen {
  id          String   @id @default(uuid())
  nidn        String   @unique
  name        String
  email       String?  @unique
  numberPhone String?  @map("number_phone")
  lesson      String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([name, nidn, createdAt])
}

model Angkatan {
  id        String    @id @default(uuid())
  year      String
  isActive  Boolean   @default(true) @map("is_active")
  Anggota   Anggota[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([year, createdAt])
}

model Anggota {
  id              String            @id @default(uuid())
  name            String
  email           String?
  nim             String            @unique
  angkatanId      String            @map("angkatan_id")
  isActive        Boolean?          @default(true) @map("is_active")
  instagram       String?
  facebook        String?
  twitter         String?
  linkedin        String?
  Alumni          Alumni[]
  angkatan        Angkatan          @relation(fields: [angkatanId], references: [id])
  Struktural      Struktural[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  PrestasiAnggota PrestasiAnggota[]

  @@index([angkatanId, name, nim, createdAt])
}

model Alumni {
  id        String   @id @unique @default(uuid())
  company   String?
  image     String
  anggotaId String   @map("anggota_id")
  anggota   Anggota  @relation(fields: [anggotaId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Department {
  id        String   @id @unique @default(uuid())
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Struktural {
  id           String   @id @unique @default(uuid())
  jabatan      Jabatan
  image        String
  anggotaId    String   @map("anggota_id")
  isActive     Boolean  @default(true) @map("is_active")
  departmentId String?  @map("department_id")
  anggota      Anggota  @relation(fields: [anggotaId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([anggotaId])
}

model Acara {
  id                  String                @id @unique @default(uuid())
  name                String
  description         String?
  image               String
  isOpen              Boolean               @default(true) @map("is_open")
  isOpenAbsen         Boolean?              @default(true) @map("is_open_absen")
  endTime             DateTime?             @default(now()) @map("end_time")
  startTime           DateTime?             @default(now()) @map("start_time")
  Absensi             Absensi[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at")
  SubAcara            SubAcara[]
  Certificate         Certificate[]
  NotificationHistory NotificationHistory[]

  @@index([name, startTime, endTime])
}

model SubAcara {
  id                  String                @id @unique @default(uuid())
  name                String
  description         String?
  image               String
  endTime             DateTime?             @default(now()) @map("end_time")
  startTime           DateTime?             @default(now()) @map("start_time")
  acaraId             String
  acara               Acara                 @relation(fields: [acaraId], references: [id], onDelete: Restrict)
  absensi             Absensi[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  NotificationHistory NotificationHistory[]

  @@index([name, startTime, endTime])
}

model Absensi {
  id          Int       @id @unique @default(autoincrement())
  image       String
  acaraId     String    @map("acara_id")
  userId      String    @map("user_id")
  subAcaraId  String?   @map("sub_acara_id")
  acara       Acara     @relation(fields: [acaraId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  coordinate  String
  address     String?
  absensiTime String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  subAcara    SubAcara? @relation(fields: [subAcaraId], references: [id])
  Point       Point[]

  @@index([userId, acaraId, createdAt])
}

model Prestasi {
  id              Int               @id @unique @default(autoincrement())
  image           String
  title           String
  description     String?
  timeDate        DateTime?
  timeString      String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updateAt        DateTime          @default(now()) @updatedAt @map("updated_at")
  PrestasiAnggota PrestasiAnggota[]
}

model Bussiness {
  id          Int            @id @unique @default(autoincrement())
  image       String
  title       String
  description String?
  price       String
  type        BussinessType? @default(MERCHANDISE)
  createdAt   DateTime       @default(now()) @map("created_at")
  updateAt    DateTime       @default(now()) @updatedAt @map("updated_at")
}

model OTP {
  id         String    @id @unique @default(uuid())
  email      String
  otp        String
  isVerified Boolean   @default(false) @map("is_verified")
  expired    DateTime?
  createdAt  DateTime  @default(now()) @map("created_at")
  updateAt   DateTime  @default(now()) @updatedAt @map("updated_at")
}

model Certificate {
  id        String   @id @unique @default(uuid())
  name      String
  image     String
  acaraId   String
  acara     Acara    @relation(fields: [acaraId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @default(now()) @updatedAt @map("updated_at")
}

model PrestasiAnggota {
  id         Int      @id @unique @default(autoincrement())
  anggotaId  String   @map("anggota_id")
  prestasiId Int      @map("prestasi_id")
  anggota    Anggota  @relation(fields: [anggotaId], references: [id])
  prestasi   Prestasi @relation(fields: [prestasiId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([anggotaId])
  @@index([prestasiId])
  @@map("prestasi_anggota")
}

model Point {
  id        Int      @id @unique @default(autoincrement())
  point     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  absensiId Int
  absensi   Absensi  @relation(fields: [absensiId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @default(now()) @updatedAt @map("updated_at")
}

model NotificationHistory {
  id         String    @id @unique @default(uuid())
  acaraId    String?
  subAcaraId String?
  acara      Acara?    @relation(fields: [acaraId], references: [id])
  subAcara   SubAcara? @relation(fields: [subAcaraId], references: [id])
  title      String
  body       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updateAt   DateTime  @default(now()) @updatedAt @map("updated_at")
}

enum Jabatan {
  KETUA_HIMPUNAN
  WAKIL_KETUA_HIMPUNAN
  BENDAHARA
  SEKRETARIS
  KETUA_DEPARTMENT
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  ANGGOTA
}

enum BussinessType {
  MERCHANDISE
  SERVICE
}
